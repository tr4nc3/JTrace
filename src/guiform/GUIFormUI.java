/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package guiform;

import com.sun.jdi.*;
import com.sun.jdi.connect.AttachingConnector;
import com.sun.jdi.connect.Connector;
import com.sun.jdi.connect.IllegalConnectorArgumentsException;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.util.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import java.util.regex.*;

/**
 *
 * @author Trance
 */

public class GUIFormUI extends javax.swing.JFrame {

    /**
     * Creates new form GUIFormUI
     */
    JavaDebugger myDebugger = null;
    Thread threadRef = null;
    JTree viewTree = null ;
    VirtualMachine vm ;
    JPanel popupProfiler = null; 
    
    public GUIFormUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        DebuggerId = new javax.swing.JTextField();
        InitButton = new javax.swing.JButton();
        LoadClassButton = new javax.swing.JButton();
        ClassListFrame = new javax.swing.JScrollPane();
        ClassListTree = new javax.swing.JTree();
        MethodListFrame = new javax.swing.JScrollPane();
        MethodList = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        OutputFrame = new javax.swing.JScrollPane();
        txtStdout = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 32767));
        ByteCodeScrollPane = new javax.swing.JScrollPane();
        ByteCodeTxtField = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        ArgValueTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 9), new java.awt.Dimension(0, 9), new java.awt.Dimension(32767, 9));
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        StartButton = new javax.swing.JButton();
        StopButton = new javax.swing.JButton();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        jLabel6 = new javax.swing.JLabel();
        IncludeFilter = new javax.swing.JTextField();
        FilterButton = new javax.swing.JButton();
        ResetFilterButton = new javax.swing.JButton();
        ExcludeFilter = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        showprocessbutton = new javax.swing.JButton();
        gencallgraphbutton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        Exit = new javax.swing.JMenuItem();
        Tools = new javax.swing.JMenu();
        ShowProfilerMenuItem = new javax.swing.JMenuItem();
        Help = new javax.swing.JMenu();
        About = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JTrace - Java Profiler by Rajat Swarup");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Connect To:");
        jLabel1.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        DebuggerId.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        DebuggerId.setText("localhost:8888");
        DebuggerId.setToolTipText("Enter the debugger IP and Port (e.g., localhost:8080)");
        DebuggerId.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        DebuggerId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DebuggerIdActionPerformed(evt);
            }
        });

        InitButton.setText("Initialize");
        InitButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        InitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InitButtonActionPerformed(evt);
            }
        });

        LoadClassButton.setText("Load classes");
        LoadClassButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        LoadClassButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadClassButtonActionPerformed(evt);
            }
        });

        ClassListFrame.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ClassListFrameFocusGained(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("None");
        ClassListTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        ClassListTree.setAutoscrolls(true);
        ClassListTree.setDoubleBuffered(true);
        ClassListTree.setEnabled(false);
        ClassListTree.setFocusCycleRoot(true);
        ClassListTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ClassListTreeMouseClicked(evt);
            }
        });
        ClassListTree.addTreeExpansionListener(new javax.swing.event.TreeExpansionListener() {
            public void treeCollapsed(javax.swing.event.TreeExpansionEvent evt) {
            }
            public void treeExpanded(javax.swing.event.TreeExpansionEvent evt) {
                ClassListTreeTreeExpanded(evt);
            }
        });
        ClassListTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                ClassListTreeValueChanged(evt);
            }
        });
        ClassListTree.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ClassListTreeFocusGainedHandler(evt);
            }
        });
        ClassListFrame.setViewportView(ClassListTree);

        MethodList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "None" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        MethodList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MethodListMouseClicked(evt);
            }
        });
        MethodList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                MethodListValueChanged(evt);
            }
        });
        MethodListFrame.setViewportView(MethodList);

        jLabel2.setText("Debug window:");

        txtStdout.setBackground(new java.awt.Color(204, 204, 204));
        txtStdout.setColumns(20);
        txtStdout.setEditable(false);
        txtStdout.setLineWrap(true);
        txtStdout.setRows(10);
        txtStdout.setFocusable(false);
        OutputFrame.setViewportView(txtStdout);

        jLabel3.setText("Arguments:");

        jButton1.setText("Load Threads");
        jButton1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        ByteCodeTxtField.setColumns(20);
        ByteCodeTxtField.setRows(5);
        ByteCodeScrollPane.setViewportView(ByteCodeTxtField);

        jLabel4.setText("Bytecode:");

        ArgValueTextField.setText("argument value");

        jLabel5.setText("Argument Value:");

        StartButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        StartButton.setText("Start");
        StartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartButtonActionPerformed(evt);
            }
        });

        StopButton.setText("Stop");
        StopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Include Filter");

        IncludeFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IncludeFilterActionPerformed(evt);
            }
        });

        FilterButton.setText("Filter");
        FilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterButtonActionPerformed(evt);
            }
        });

        ResetFilterButton.setText("Reset");
        ResetFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetFilterButtonActionPerformed(evt);
            }
        });

        jLabel7.setText("Exclude Filter");

        showprocessbutton.setText("Show Process Info");
        showprocessbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showprocessbuttonActionPerformed(evt);
            }
        });

        gencallgraphbutton.setText("Generate Call Graph");

        File.setText("File");

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        File.add(Exit);

        jMenuBar1.add(File);

        Tools.setText("Edit");
        Tools.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ToolsMouseClicked(evt);
            }
        });

        ShowProfilerMenuItem.setText("Show Profiler");
        ShowProfilerMenuItem.setToolTipText("Shows the runtime profiling output");
        ShowProfilerMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ShowProfilerMenuItemMouseClicked(evt);
            }
        });
        ShowProfilerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowProfilerMenuItemActionPerformed(evt);
            }
        });
        Tools.add(ShowProfilerMenuItem);

        jMenuBar1.add(Tools);

        Help.setText("Help");

        About.setText("About");
        About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutActionPerformed(evt);
            }
        });
        Help.add(About);

        jMenuBar1.add(Help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(OutputFrame)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(DebuggerId, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(StartButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(StopButton))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(gencallgraphbutton)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(InitButton)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(LoadClassButton)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jButton1)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(showprocessbutton)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel7))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(IncludeFilter, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                                            .addComponent(ExcludeFilter))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(FilterButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ResetFilterButton)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(ClassListFrame))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(filler1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(filler3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(filler4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(filler5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ArgValueTextField)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGap(235, 235, 235))
                            .addComponent(ByteCodeScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                            .addComponent(MethodListFrame)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(DebuggerId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(StartButton)
                            .addComponent(StopButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(InitButton)
                            .addComponent(LoadClassButton)
                            .addComponent(jButton1))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(filler3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(filler4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(43, 43, 43)
                                .addComponent(filler5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(56, 56, 56))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(showprocessbutton)
                                    .addComponent(gencallgraphbutton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ClassListFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MethodListFrame, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                        .addGap(2, 2, 2)
                        .addComponent(jLabel4)
                        .addGap(2, 2, 2)
                        .addComponent(ByteCodeScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addGap(11, 11, 11)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(IncludeFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FilterButton)
                    .addComponent(ResetFilterButton)
                    .addComponent(ArgValueTextField))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ExcludeFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OutputFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private VirtualMachine connect(String hostname, String args)
        throws IOException {
		String strPort = args.toString();
		AttachingConnector connector = getConnector();   
		System.err.println("Port received " + strPort + "\n");
		try {
			vm = connect(connector, hostname, strPort);
			return vm;
		} 
		catch (IllegalConnectorArgumentsException e) {
			throw new IllegalStateException(e);
		}
	}
    private AttachingConnector getConnector() {

        VirtualMachineManager vmManager = Bootstrap.virtualMachineManager();
        
        for (Connector connector : vmManager.attachingConnectors()) {
            System.err.println(connector.name());
                if ("com.sun.jdi.SocketAttach".equals(connector.name())) {
                    return (AttachingConnector) connector;
                }
	}
	throw new IllegalStateException();
    }
    private VirtualMachine connect(AttachingConnector connector, String hostname, String port)
        throws IllegalConnectorArgumentsException,
                        IOException {
        Map<String, Connector.Argument> args = connector.defaultArguments();
        Connector.Argument pidArgument = args.get("port");
        
        if (pidArgument == null) {
            throw new IllegalStateException();
         }
         pidArgument.setValue(port);
         Connector.Argument targetSystem = args.get("hostname");
         targetSystem.setValue(hostname);
         System.err.println(args.toString());
         return connector.attach(args);
    }
    private void InitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InitButtonActionPerformed
        // TODO add your handling code here:
        String[] connectorArr = DebuggerId.getText().split(":");
        try {
            vm = connect(connectorArr[0],connectorArr[1]);
            myDebugger = new JavaDebugger(vm);
            //List<ThreadReference> threadlist = myDebugger.getThreadList();            
            HashMap<ThreadGroupReference,ThreadGroupReference> threadMap = new HashMap();
            List<ThreadGroupReference> tgr = myDebugger.getThreadGroupsForVM();
            for (ThreadGroupReference tmp: tgr) {
                if (tmp!=null)
                    txtStdout.append("ThreadGroup : "+tmp.name()+" has parent " +tmp.parent()+"\n");
                //if (tmp.parent() == null) {
                //    threadMap.put(tmp.name(),new DefaultMutableTreeNode(""));
                //}
                //else {
                //    DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode)threadMap.get(tmp.parent().name());
                //    if (parentNode == null) { //parent not found, and parent is present, then add parent
                if (tmp.parent() != null)
                    threadMap.put(tmp,tmp.parent());
                else threadMap.put(tmp,null);
            }
            DefaultMutableTreeNode root = null;
            Set<ThreadGroupReference> threadSet = threadMap.keySet();
            Iterator i = threadSet.iterator(); 
            /*synchronized (this) {
            while (i.hasNext()) {
                //ThreadGroupReference me = (ThreadGroupReference) i.next();
                //System.out.print(me.name() + " : ");
                //System.out.println(me.parent().name());
                if (root == null) {
                    root = new DefaultMutableTreeNode(me.parent());
                    root.add(new DefaultMutableTreeNode(me));
                    threadMap.remove(me);
                }
                else
                {}   
                
                }
            }*/ 
            
                    //threadMap.put(tmp.name(),new DefaultMutableTreeNode(tmp.parent().name()));
               // }
            //}   
        }
        catch(IOException ioe) {
            JOptionPane.showMessageDialog(null, "Debugger Initialization Error", 
                "Unable to connect to "+DebuggerId.getText(), JOptionPane.ERROR_MESSAGE); 
            System.err.println(ioe.getMessage());
            vm = null;
            return;
        }
        txtStdout.append("\nSuccess! Connected to "+DebuggerId.getText()
                        +". Click Load classes\n");       
        
    }//GEN-LAST:event_InitButtonActionPerformed
    //private FindLink(HashMap<ThreadReference,ThreadReference> thrRef,)
    private JTree assignNewTree(DefaultMutableTreeNode node) {
        JTree tree = new JTree(node);
        tree.getSelectionModel().setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);
        //ClassListTree.getParent().add(tree);
        tree.setFocusable(true);
        tree.setEnabled(true);
        tree.setVisible(true);
        PopupMenuListener popupListener = new PopupMenuListener() {
            @Override
            public void popupMenuCanceled(PopupMenuEvent popupMenuEvent) {
                //showMenuIfPopupTrigger(popupMenuEvent);                
                //System.err.println("Event type : " );
                //System.out.println("Canceled");
            }

            @Override
            public void popupMenuWillBecomeInvisible(PopupMenuEvent popupMenuEvent) {
                //showMenuIfPopupTrigger(popupMenuEvent);
                //System.err.println("Event type : " + popupMenuEvent.getSource());
                //System.out.println("Becoming Invisible");
            }

            @Override
            public void popupMenuWillBecomeVisible(PopupMenuEvent popupMenuEvent) {
                //showMenuIfPopupTrigger(popupMenuEvent);
                //System.err.println("Event type : " + popupMenuEvent.getSource());
                //System.out.println("Becoming Visible");
            }
            private void showMenuIfPopupTrigger(PopupMenuEvent e) {
                
            }
            private void setSelectedItemsOnPopupTrigger(MouseEvent e) {
                JPopupMenu menu = (JPopupMenu)e.getSource();
                JTree tree = (JTree)menu.getInvoker();
                TreePath selPath = tree.getSelectionPath();
                if (selPath == null)
                        return; 
                tree.setSelectionPath(selPath);
                final DefaultMutableTreeNode obj = 
                        (DefaultMutableTreeNode)selPath.getLastPathComponent();
                if (obj != null) {
                    if (obj.getUserObject() instanceof Method) {
                        txtStdout.append("Method watched : "+
                            myDebugger.addMethodWatch((Method)obj.getUserObject()));
                    } else {
                        if (obj.getUserObject() instanceof ClassType) {
                            ClassType selectedClass = (ClassType)obj.getUserObject();
                            List<Method> methodsInClass =
                                    selectedClass.allMethods();
                            selectedClass.allMethods();
                            selectedClass.allMethods();
                            for (Method tmpMethod : methodsInClass) {
                                txtStdout.append("Method watched : "+
                                    myDebugger.addMethodWatch(tmpMethod));
                            }    
                        }
                        else {
                            if (obj.getUserObject() instanceof ReferenceType) {
                                ReferenceType refType = (ReferenceType)obj.getUserObject();
                                List<Method> methodsInClass = refType.allMethods();
                                for (Method tmpMethod : methodsInClass) {
                                    txtStdout.append("Method watched : "+
                                            myDebugger.addMethodWatch(tmpMethod));
                                }
                            }
                        }
                    }
                }
            }
        };
        final JPopupMenu popup = new JPopupMenu();
        final JMenuItem item = new JMenuItem("Add Watch");
        final JMenuItem breakitem = new JMenuItem("Add Breakpoint");
        
        popup.add(item);
        popup.add(breakitem);
        popup.addPopupMenuListener(popupListener);
        popup.setInvoker(tree);
        
        MouseListener ml = new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e)) {
                    JTree ltree = (JTree)e.getSource();
                    TreePath selPath = ltree.getPathForLocation(e.getX(), e.getY());
                    if (selPath == null)
                        return;
                    if (e.isPopupTrigger()) {
                        popup.show((Component)e.getSource(), e.getX(), e.getY());
                    }
                }
            }
            @Override
            public void mousePressed(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e)) {
                    System.err.println("Right Mouse button clicked");
                    JTree ltree = (JTree)e.getSource();
                    TreePath path = ltree.getPathForLocation(e.getX(), e.getY());
                    //TreePath path = ltree.getPathForLocation(e.getX(), e.getY());                    
                    if (path == null)
                        return; 
                    //ClassListTree.setSelectionPath(path);
                    if (e.isPopupTrigger()) {
                        popup.show((Component)e.getSource(), e.getX(), e.getY());
                    }
                }
           }
        };
        MouseListener menuclicklistener = new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent evt) {
                JTree ltree = (JTree)(((JPopupMenu)((JMenuItem)evt.getSource()).getParent()).getInvoker());
                if (ltree == null || ltree.getLastSelectedPathComponent() == null) {
                    return;
                }
                //ltree.setSelectionPath(path);
                Object obj = 
                    ((DefaultMutableTreeNode)ltree.getLastSelectedPathComponent()).getUserObject();
                if (obj instanceof Method) {
                    txtStdout.append("Method watched : "+
                            myDebugger.addMethodWatch((Method)obj));
                }
                else {
                    if (obj instanceof ClassType) {
                        ClassType selectedClass = (ClassType)obj;
                        List<Method> methodsInClass = 
                                    selectedClass.allMethods();
                        for (Method tmpMethod : methodsInClass) {
                            txtStdout.append("Method watched : "+
                            myDebugger.addMethodWatch(tmpMethod));
                        }    
                    }
                    else {
                        if (obj instanceof ReferenceType) {
                            txtStdout.append("Unable to add watch");
                        }
                    }
                }
            }
        };
        MouseListener breakptclicklistener = new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent evt) {
                JTree ltree = (JTree)(((JPopupMenu)((JMenuItem)evt.getSource()).getParent()).getInvoker());
                if (ltree == null || ltree.getLastSelectedPathComponent() == null) {
                    return;
                }
                Object obj = 
                    ((DefaultMutableTreeNode)ltree.getLastSelectedPathComponent()).getUserObject();
                if (obj instanceof Method) {
                    txtStdout.append("Break wanted on: "+
                            myDebugger.addBreakpoint((Method)obj));
                }
                else {
                    if (obj instanceof ClassType) {
                        ClassType selectedClass = (ClassType)obj;
                        List<Method> methodsInClass = 
                                    selectedClass.allMethods();
                        for (Method tmpMethod : methodsInClass) {
                            txtStdout.append("Break wanted on: "+
                            myDebugger.addBreakpoint(tmpMethod));
                        }    
                    }
                    else {
                        if (obj instanceof ReferenceType) {
                            txtStdout.append("Unable to add watch");
                        }
                    }
                }
            }
        };
        item.addMouseListener(menuclicklistener);
        breakitem.addMouseListener(breakptclicklistener);
        tree.addMouseListener(ml);
        tree.setComponentPopupMenu(popup);
        tree.getModel().addTreeModelListener(new TreeModelListener() {
            @Override
            public void treeNodesChanged(TreeModelEvent tme) {
                TreePath tp = tme.getTreePath();
                Object[] children = tme.getChildren();
                DefaultMutableTreeNode changedNode;
                if (children != null)
                    changedNode = (DefaultMutableTreeNode) children[0];
                else
                    changedNode = (DefaultMutableTreeNode) tp.getLastPathComponent();
                System.err.println("Model change path: " + tp + "New data: "
                                    + changedNode.getUserObject());
            }
            @Override
            public void treeNodesInserted(TreeModelEvent tme) { }
            @Override
            public void treeNodesRemoved(TreeModelEvent tme) { }
            @Override
            public void treeStructureChanged(TreeModelEvent tme) { }
        });
        return tree; 
    }

    private void LoadClassButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadClassButtonActionPerformed
        // TODO add your handling code here:
        if (myDebugger != null) {
            DefaultMutableTreeNode root = new DefaultMutableTreeNode(DebuggerId.getText());
            ClassListTree = assignNewTree(populateClassTree(myDebugger.getReferences(),root));
            ClassListTree.addTreeSelectionListener(new TreeSelectionListener() {
                @Override
                public void valueChanged(TreeSelectionEvent e) {
                    ClassListTreeValueChanged(e);
                }
            });
            viewTree = ClassListTree;
            ClassListFrame.setViewportView(ClassListTree);
        }
    }//GEN-LAST:event_LoadClassButtonActionPerformed
    
    private DefaultMutableTreeNode populateClassTree(List<ReferenceType> ref, 
                                            DefaultMutableTreeNode top) {
        for (ReferenceType tmp : ref) {
            if (tmp.classLoader() != null) {
                System.err.println(tmp.toString());
                DefaultMutableTreeNode classid = new DefaultMutableTreeNode(tmp);
                top.add(classid);
                List<Method> listOfMethods = tmp.methods();
                for (Method tmpMethod : listOfMethods) {
                    classid.add(new DefaultMutableTreeNode(tmpMethod));
                }
                System.err.println(" classid is : "+classid);
            }
        }    
        return top;
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        txtStdout.setText(myDebugger.getThreadList().toString());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void DebuggerIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DebuggerIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DebuggerIdActionPerformed

    private void ClassListFrameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ClassListFrameFocusGained
        // TODO add your handling code here:
        System.err.println("Focus gained on frame" + evt.toString());
        
    }//GEN-LAST:event_ClassListFrameFocusGained

    private void MethodListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_MethodListValueChanged
        // TODO add your handling code here:
//        if (SwingUtilities.isRightMouseButton(evt)) {
//            System.err.println("Right mouse button clicked in args menu");
//        }
    }//GEN-LAST:event_MethodListValueChanged

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
        //;pack();
    }//GEN-LAST:event_formComponentResized

    private void StartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartButtonActionPerformed
        // TODO add your handling code here:
        SwingWorker<DebuggerThread, Void> worker = new SwingWorker<DebuggerThread, Void>() {
            @Override
            public DebuggerThread doInBackground() {
                myDebugger.start();
                DebuggerThread t = new DebuggerThread(myDebugger);
                vm.resume(); // start the application
                try {
                    myDebugger.join(); // Wait. Shutdown begins when the JDI watcher terminates    
                } catch (InterruptedException e) { 
                    e.printStackTrace(); 
                }
                return t;
            }
            @Override
            public void done() {
                try {
                    get();
                }
                catch(InterruptedException ie) {
                    ie.printStackTrace();
                }
                catch(Exception e) {
                    e.printStackTrace();
                }
            }
        };
        worker.execute();
    }//GEN-LAST:event_StartButtonActionPerformed

    private void StopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopButtonActionPerformed
        // TODO add your handling code here:
        myDebugger.disconnectFromVM();
    }//GEN-LAST:event_StopButtonActionPerformed
    private void repopulateTree() {
        //viewTree = new JTree();
        TreeModel tmodel = ClassListTree.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode)(tmodel.getRoot());
        DefaultMutableTreeNode tempRoot = (DefaultMutableTreeNode)root.getFirstChild();
        DefaultMutableTreeNode newRoot = new DefaultMutableTreeNode(root); 
        String includeStr = IncludeFilter.getText().toLowerCase();
        String excludeStr = ExcludeFilter.getText().toLowerCase();
        for (int i=0; i < root.getChildCount(); i++) {
           DefaultMutableTreeNode newChild = null;
           if (excludeStr.length() > 0 && 
                   tempRoot.toString().toLowerCase().contains(excludeStr)) {
           }
           else {
               if (tempRoot.toString().toLowerCase().contains(includeStr)) {   
                    newChild = new DefaultMutableTreeNode(tempRoot);
                    //newRoot.add(newChild);
               }
               //DefaultMutableTreeNode branch = (DefaultMutableTreeNode)
                //                                    tempRoot.getFirstChild();
               for (int j = 0; j < tempRoot.getChildCount(); j++) {
                   DefaultMutableTreeNode branch = (DefaultMutableTreeNode)tempRoot.getChildAt(j);
                   //while (branch !=null) {     
                   if (branch!=null && excludeStr.length() > 0 &&
                            branch.toString().toLowerCase().contains(excludeStr)) {}
                    else {
                          if (branch!=null && 
                                  branch.toString().toLowerCase().contains(includeStr)) {
                            if (newChild != null) {
                                newChild.add(branch);
                            } else {
                                newChild = new DefaultMutableTreeNode(tempRoot);
                                newChild.add(branch);
                            }
                          }
                    }
                    branch = branch.getNextSibling();
               } //END OF while 
               if (newChild != null && newChild.getChildCount() > 0)
                    newRoot.add(newChild);
           }
           if ((tempRoot.getNextSibling()) == null) 
               tempRoot = (DefaultMutableTreeNode)root.getChildAfter(tempRoot);
           else tempRoot = tempRoot.getNextSibling();
        }
        viewTree = assignNewTree(newRoot);
        //viewTree.setModel(tmodel);
        viewTree.addTreeSelectionListener(new TreeSelectionListener() {
                @Override
                public void valueChanged(TreeSelectionEvent e) {
                    ClassListTreeValueChanged(e);
                }
            });
        ClassListFrame.add(viewTree);
        ClassListFrame.setViewportView(viewTree);
    }
    private void IncludeFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IncludeFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IncludeFilterActionPerformed

    private void FilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterButtonActionPerformed
        // TODO add your handling code here:
         if (viewTree == null ) {
             txtStdout.setText("Please load classes first! Click on Load classes.\n");
             return;
         }
         repopulateTree();
    }//GEN-LAST:event_FilterButtonActionPerformed

    private void ResetFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetFilterButtonActionPerformed
        // TODO add your handling code here:
        ClassListFrame.setViewportView(ClassListTree);
    }//GEN-LAST:event_ResetFilterButtonActionPerformed

    private void ClassListTreeFocusGainedHandler(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ClassListTreeFocusGainedHandler
        // TODO add your handling code here:
        System.err.println("Focus gained on Tree" + evt.toString());
    }//GEN-LAST:event_ClassListTreeFocusGainedHandler

    private void ClassListTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_ClassListTreeValueChanged
        // TODO add your handling code here:
        ClassListTree.getSelectionModel().setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) ClassListTree.getLastSelectedPathComponent();
        //MouseAdapter methodmouselistener = 
        //Method selectedMethod = null; 
        
        if (node == null) {
            System.err.println("Nothing selected");
            return;
        }
        Object nodeInfo = node.getUserObject();
        //System.err.println("Node is a reference type"+nodeInfo.toString()); 
        if (nodeInfo instanceof ClassType) {
            System.err.println("Node is a Class " + nodeInfo.toString());
        } else {
            if (nodeInfo instanceof Method) {
                System.err.println("Node is a Method " + nodeInfo.toString());
                final Method selectedMethod = (Method) nodeInfo;
                if (myDebugger.canVMGenerateByteCode()) {
                    if (selectedMethod.bytecodes().length > 0) {
                        String[] opcodes = myDebugger.disassembleByteCode(selectedMethod.bytecodes());
                        ByteCodeTxtField.setText("");
                        for (int i = 0; i < opcodes.length; i++) {
                            if (opcodes[i] != null) 
                                ByteCodeTxtField.append(opcodes[i] + "\n");
                        }
                    }
                    DefaultListModel model = new DefaultListModel();
                    //List<com.sun.jdi.LocalVariable> tmpLocalVars = null;
                    //List<com.sun.jdi.Type> tmpLocalVars = null;
                    List<String> tmpLocalVars = null;
                    //try {
                        tmpLocalVars = selectedMethod.argumentTypeNames();
                        //selectedMethod.
                        //tmpLocalVars = selectedMethod.arguments();
                        //for (com.sun.jdi.Type localvar : tmpLocalVars) {
                        for (String localvar : tmpLocalVars) {
                            model.addElement(localvar);
                            //System.err.println("Variable : " + localvar.toString());
                        }
                        MethodList = new JList(model);
                        final JPopupMenu methodPopup = new JPopupMenu();
                        JMenuItem jwatch = new JMenuItem("Add Watch");
                        methodPopup.add(jwatch);
                        jwatch.addMouseListener(new MouseAdapter() {
                            @Override
                            public void mousePressed(MouseEvent e) {
                                JMenuItem clickeditem = (JMenuItem)e.getSource();
                                System.err.println("Selected item : "+MethodList.getModel().getElementAt(MethodList.getSelectedIndex()));
                                try {
                                    //selectedMethod.
                                    //myDebugger.setAccessWatch(selectedMethod.argumentTypeNames());
                                    List<Location> tmpLocations = selectedMethod.allLineLocations();
                                    for (Location brklocation : tmpLocations ) {
                                        myDebugger.setAccessWatch(brklocation.declaringType().fields());
                                    }
                                    //System.err.println(selectedMethod.arguments().get(MethodList.getSelectedIndex()));
                                }
                                catch (AbsentInformationException aie) {
                                    aie.printStackTrace();
                                }
                                //myDebugger.setAccessWatch(selectedMethod,);
                                //System.err.println("Selected item : " +clickeditem.getSelectedObjects());
                            }
                            
                        });
                        
                        MethodList.addMouseListener(new MouseAdapter() {
                            @Override
                            public void mousePressed(MouseEvent e) {
                                check(e);
                            }
                            @Override
                            public void mouseReleased(MouseEvent e) {
                                check(e);
                            }
                            public void check(MouseEvent e) {
                                if (e.isPopupTrigger()) { //if the event shows the menu
                                    System.err.println("Right click in Arguments window");
                                    //System.err.println(e.getSource());
                                    MethodList.setSelectedIndex(MethodList.locationToIndex(e.getPoint())); //select the item
                                    System.err.println(MethodList.getModel().getElementAt(MethodList.getSelectedIndex()));
                                    methodPopup.show(MethodList, e.getX(), e.getY()); //and show the menu
                                    DefaultMutableTreeNode obj = ((DefaultMutableTreeNode)
                                            ClassListTree.getSelectionPath().getLastPathComponent());
                                    myDebugger.addMethodWatch((Method)obj.getUserObject());
                                    System.err.println("In method : " +
                                     ((DefaultMutableTreeNode)ClassListTree.getSelectionPath().getLastPathComponent()).toString());
                                }
                            }
                        });
                        MethodListFrame.setViewportView(MethodList);
                    //} 
                    //catch (ClassNotLoadedException cnle) { //(AbsentInformationException cnfe) {
                    //    System.err.println(cnle.getMessage());
                        //MethodList = null;
                    //    MethodListFrame.setViewportView(MethodList);
                    //}
                }
                else {
                    ByteCodeTxtField.setText("Unable to get bytecode");
                }
            }
            else {
                if (nodeInfo instanceof ReferenceType) {
                    System.err.println("Default Reference Type");
                }
            }
        }
    }//GEN-LAST:event_ClassListTreeValueChanged

    private void ClassListTreeTreeExpanded(javax.swing.event.TreeExpansionEvent evt) {//GEN-FIRST:event_ClassListTreeTreeExpanded
        // TODO add your handling code here:
        System.err.println(evt.toString());
    }//GEN-LAST:event_ClassListTreeTreeExpanded

    private void ClassListTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ClassListTreeMouseClicked
        // TODO add your handling code here:
        //System.err.println("Mouse Clicked in tree");

   }//GEN-LAST:event_ClassListTreeMouseClicked

    private void AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AboutActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // TODO add your handling code here:
        dispose();
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void ToolsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ToolsMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_ToolsMouseClicked

    private void ShowProfilerMenuItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ShowProfilerMenuItemMouseClicked
        // TODO add your handling code here:
        /*System.err.println("Profile clicked");
        popupProfiler = new Runtimer(ClassListTree);
        popupProfiler.setVisible(true);*/
    }//GEN-LAST:event_ShowProfilerMenuItemMouseClicked

    private void ShowProfilerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowProfilerMenuItemActionPerformed
        // TODO add your handling code here:
        System.err.println("Profile clicked");
        popupProfiler = new Runtimer(ClassListTree);
        popupProfiler.setVisible(true);
        
    }//GEN-LAST:event_ShowProfilerMenuItemActionPerformed

    private void MethodListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MethodListMouseClicked
        // TODO add your handling code here:
        if ( SwingUtilities.isRightMouseButton(evt) ) {
            System.out.println("Row: " + MethodList.locationToIndex(evt.getPoint()));
            MethodList.setSelectedIndex(MethodList.locationToIndex(evt.getPoint()));
        }
        
        PopupMenuListener popupListener = new PopupMenuListener() {
            @Override
            public void popupMenuCanceled(PopupMenuEvent popupMenuEvent) {
            }
            @Override
            public void popupMenuWillBecomeInvisible(PopupMenuEvent popupMenuEvent) {
            }
            @Override
            public void popupMenuWillBecomeVisible(PopupMenuEvent popupMenuEvent) {
            }
            private void showMenuIfPopupTrigger(PopupMenuEvent e) {
            }
            private void setSelectedItemsOnPopupTrigger(MouseEvent e) {
            }
        };
    }//GEN-LAST:event_MethodListMouseClicked

    private void showprocessbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showprocessbuttonActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_showprocessbuttonActionPerformed
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIFormUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIFormUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIFormUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIFormUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new GUIFormUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem About;
    private javax.swing.JTextField ArgValueTextField;
    private javax.swing.JScrollPane ByteCodeScrollPane;
    private javax.swing.JTextArea ByteCodeTxtField;
    private javax.swing.JScrollPane ClassListFrame;
    private javax.swing.JTree ClassListTree;
    private javax.swing.JTextField DebuggerId;
    private javax.swing.JTextField ExcludeFilter;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenu File;
    private javax.swing.JButton FilterButton;
    private javax.swing.JMenu Help;
    private javax.swing.JTextField IncludeFilter;
    private javax.swing.JButton InitButton;
    private javax.swing.JButton LoadClassButton;
    private javax.swing.JList MethodList;
    private javax.swing.JScrollPane MethodListFrame;
    private javax.swing.JScrollPane OutputFrame;
    private javax.swing.JButton ResetFilterButton;
    private javax.swing.JMenuItem ShowProfilerMenuItem;
    private javax.swing.JButton StartButton;
    private javax.swing.JButton StopButton;
    private javax.swing.JMenu Tools;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.JButton gencallgraphbutton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JButton showprocessbutton;
    private javax.swing.JTextArea txtStdout;
    // End of variables declaration//GEN-END:variables
}
